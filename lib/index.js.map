{"version":3,"sources":["src/index.js"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["export default function (modelName, schema, mongoose) {\n\n  class Store {\n    constructor (modelName, schema, mongoose) {\n      // Extract\n      let { Schema, connection } = mongoose;\n\n      // Set model name\n      this.name = modelName;\n\n      // Create Schema\n      this.schema = new Schema(schema);\n\n      // Create Model\n      this.model = connection.model(this.name, this.schema);\n\n      return this;\n    }\n    getModel () {\n      return this.model;\n    }\n    getSchema () {\n      return this.schema;\n    }\n\n    parseQuery (query) {\n      if (typeof query !== 'object') {\n        query = {};\n      }\n      // Parse query arguments\n      for (let k in query) {\n        if (typeof query[k] !== 'object') {\n          try {\n            query[k] = JSON.parse(query[k]);\n          }\n          catch (e) {\n            console.log('Error:', e);\n            query[k] = null;\n          }\n        }\n      }\n      return query;\n    }\n\n    find (params, callback) {\n      if (typeof params === 'function') {\n        callback = params;\n        params = {};\n      }\n      let query = this.parseQuery(params.query);\n\n      this.model.find(query.conditions, query.fields, query.options, function (err, data) {\n        callback(err, data);\n      });\n    }\n\n    get (id, params, callback) {\n      if (typeof params === 'function') {\n        callback = params;\n        params = {};\n      }\n      let query = this.parseQuery(params.query);\n\n      this.model.findById(id, query.fields, query.options, function (err, data) {\n        callback(err, data);\n      });\n    }\n\n    create (data, params, callback) {\n      let obj = new this.model(data);\n      obj.save(function (err, data) {\n        callback(err, data);\n      });\n    }\n\n    update (id, data, params, callback) {\n      this.model.findByIdAndUpdate(id, data, {\n        upsert: true\n      }, function (err, data) {\n        return callback(err, data);\n      });\n    }\n\n    remove (id, params, callback) {\n      this.model.findByIdAndRemove(id, function (err, data) {\n        return callback(err, data);\n      });\n    }\n  }\n\n  return new Store(modelName, schema, mongoose);\n\n}\n"]}